# -*- coding: utf-8 -*-
"""bj1012.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18C28-ETfyKOuDCW25vB5kZMxpTbJOmkT
"""

N = int(input())

def where(l1):
    l1 = 



for _ in range(N):
    x, y, n = map(int, input().split())
    L = []
    L1 = [] 
    cnt = 0
    for _ in range(n):
        x1, y1 = map(int, input().split())
        L.append(x1, y1)

    # L = sorted(L, key=lambda x : (x[0], x[1]))

    for i in range(n):

        L1 = []

q = [1, 2, 3, 4, 5]

for i in range(9, -1, -1):
    print(i)

N = int(input())

def search1(a, b):  # 튜플로 받음
    if a[0] == b[0]:
        if abs(a[1] - b[1]) == 1:
            return True
    elif a[1] == b[1]:
        if abs(a[0] - b[0]) == 1:
            return True

def search2(a, l1):
    l = []
    for i in range(len(l1)):
        if search1(a, l1[i]):
            l.append(i)
        elif a == l1[i]:
            l.append(i)
    return l




for _ in range(N):
    x, y, n = map(int, input().split())
    L = []
    L2 = []
    cnt = 0
    for i in range(n):
        x1, y1 = map(int, input().split())
        L.append((x1, y1))

    for i in range(n):
        idx = search2(L[i], L)
        L2.append(idx)
    print(L2)

    while L2:
        sol = L2.pop()
        cnt += 1
        for i in range(len(L2)-1, -1, -1):
            if set(sol) & set(L2[i]):
                sol = list(set(sol) | set(L2[i]))
                del L2[i]

    print(cnt)

N = int(input())

def search1(a, b):
    if a[0] == b[0]:
        if abs(a[1] - b[1]) == 1:
            return True
        elif a[1] == b[1]:
            return True
    elif a[1] == b[1]:
        if abs(a[0] - b[0]) == 1:
            return True
        else:
            return False

def search2(a, l1):
    l = []
    for i in range(len(l1)):
        if search1(a, l1[i]):
            l.append(i)
    return l




for _ in range(N):
    x, y, n = map(int, input().split())
    L = []
    L2 = []
    cnt = 0
    for i in range(n):
        x1, y1 = map(int, input().split())
        L.append((x1, y1))

    for i in range(n):
        idx = search2(L[i], L)
        L2.append(idx)

    while L2:
        sol = L2.pop()
        cnt += 1
        for i in range(len(L2)-1, -1, -1):
            if set(sol) & set(L2[i]):
                sol = list(set(sol) | set(L2[i]))
                del L2[i]

    print(cnt)

"""# 11/2 시도"""

# 1012

def isValid(x, y):
    if x < 0 or y <0 or x >= M or y >= N:
        return False
    else:
        return fld[y][x] == 1

MAX_QSIZE = 10
class CircularQueue:
    def __init__(self):
        self.front = 0
        self.rear = 0
        self.items = [None] * MAX_QSIZE
    def isEmpty(self):
        return self.front == self.rear
    def isFull(self): return self.front == (self.rear+1) % MAX_QSIZE
    def clear(self): self.front = self.rear
    
    # 연산
    def enqueue(self, item):
        if not self.isFull():
            self.rear = (self.rear+1)%MAX_QSIZE
            self.items[self.rear] = item
    def dequeue(self):
        if not self.isEmpty():
            self.front = (self.front+1)%MAX_QSIZE
            return self.items[self.front]
    def peek(self):
        if not self.isEmpty():
            return self.items[(self.front+1)%MAX_QSIZE]
    def size(self):
        return (self.rear - self.front + MAX_QSIZE)%MAX_QSIZE


T = int(input())

for _ in range(T):
    M, N, K = map(int, input().split())
    fld = [[0 for i in range(M)] for j in range(N)]
    cnt = 0
    MAX_QSIZE = 100
    L = []

    for _ in range(K):
        x, y = map(int, input().split())
        fld[y][x] = 1
        L.append((x, y))
    
    
    for x, y in L:
            if fld[y][x] == 0:
                continue
            elif fld[y][x] == 2:
                continue
            else:
                tmp = []
                que = CircularQueue()
                que.enqueue((x, y))
                while not que.isEmpty():
                    here = que.dequeue()
                    x, y = here
                    fld[y][x] = 2
                    if isValid(x, y-1):
                        que.enqueue((x, y-1))
                        tmp.append((x, y-1))
                    if isValid(x, y+1):
                        que.enqueue((x, y+1))
                        tmp.append((x, y+1))
                    if isValid(x-1, y):
                        que.enqueue((x-1, y))
                        tmp.append((x-1, y))
                    if isValid(x+1, y):
                        que.enqueue((x+1, y))
                        tmp.append((x+1, y))
                cnt += 1

    print(cnt)

fld

r = [(1,0), (4, 5)]

for i, j in r:
    print(i, j)